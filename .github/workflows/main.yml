name: Build, Push to ECR, and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: github-actions
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA

      - name: Deploy on AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.HOSTNAME }}
          USERNAME: ${{ secrets.USERNAME }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' ${GITHUB_WORKSPACE}/docker-compose.yml
          sed -i -e 's/ECR_REGISTRY/'"$ECR_REGISTRY"'/' ${GITHUB_WORKSPACE}/docker-compose.yml
          scp -o StrictHostKeyChecking=no -i private_key.pem ${GITHUB_WORKSPACE}/docker-compose.yml ${USERNAME}@${HOSTNAME}:/tmp 
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USERNAME}@${HOSTNAME} '
            cd /tmp
            docker-compose -p backend-flask up -d
          '
